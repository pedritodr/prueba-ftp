const ftp = require("basic-ftp")
const fs = require("fs");


example()

async function example() {
    const client = new ftp.Client()
    client.ftp.verbose = true
    try {
        await client.access({
            host: "161.47.96.208",
            user: "usrfabrica",
            password: "test123",
            secure: false
        })
        const invoice = { fileData: "" };
        let buff = new Buffer.from(invoice.fileData, 'base64');
        let path = __dirname + '/temp-uploads/invoice.xml';
        fs.writeFileSync(path, buff);

        //  await client.ensureDir("planing-test")

        // console.log(await client.list())
        await client.uploadFrom(path, "/planing-test/invoice-ftp.xml");
        fs.unlinkSync(path);
        // await client.downloadTo("ArchivosCopiaTXT", "ArchivosCopiaTXT")
        // let p = await client.ensureDir("my/remote/directory")
        //  console.log(p);

        //await client.clearWorkingDir()
        //await client.uploadFromDir("my/local/directory")
    } catch (err) {
        console.log(err)
    }

    // client.close()
}